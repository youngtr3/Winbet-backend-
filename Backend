const express = require('express');
const bcrypt = require('bcrypt');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

const db = new sqlite3.Database('./slots.db');

db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS usuarios (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nickname TEXT UNIQUE,
    senha TEXT,
    saldo INTEGER DEFAULT 0
  )`);
});

app.post('/api/register', (req, res) => {
  const { nickname, senha } = req.body;
  const hash = bcrypt.hashSync(senha, 10);
  db.run('INSERT INTO usuarios (nickname, senha) VALUES (?, ?)', [nickname, hash], function (err) {
    if (err) return res.json({ success: false, message: 'Nickname já cadastrado!' });
    res.json({ success: true, message: 'Usuário registrado!' });
  });
});

app.post('/api/login', (req, res) => {
  const { nickname, senha } = req.body;
  db.get('SELECT * FROM usuarios WHERE nickname = ?', [nickname], (err, row) => {
    if (!row) return res.json({ success: false, message: 'Usuário não encontrado!' });
    if (!bcrypt.compareSync(senha, row.senha)) return res.json({ success: false, message: 'Senha incorreta!' });
    res.json({ success: true, user: { id: row.id, nickname: row.nickname, saldo: row.saldo } });
  });
});

app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
